##############################################################################
## Standard Profile
## See custom (environment specific) profiles below
##############################################################################
info:
  component: Zuul API Gateway

server:
  port: 8081
  connection-timeout: 200000

eureka:
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://dockerized-eureka-server:8761/eureka/

security:
  basic:
    enabled: false

hystrix:
  command:
    default:
      execution.timeout.enabled: false
      execution.isolation.semaphore.maxConcurrentRequests: 500
      execution.isolation.thread.timeoutInMilliseconds: 190000
    dockerized-microserviceRibbonCommand:
      execution.isolation.semaphore.maxConcurrentRequests: 500
  stream:
    amqp:
      enabled: false

ribbon:
  ConnectTimeout: 10000
  ReadTimeout: 120000

zuul:
  # Disable default mapping (all eureka services are mapped to /<service-name> - we don't want to automatically expose
  # every service
  ignored-services: '*'

  routes:
    # Explicit mapping of our registered cloud services:

    # Project based mappings (all requests are in the context of a specific project)
    dockerized-microservice:
      path: /api/Demo/*
      stripPrefix: false

    # Swagger documentation pass throughs for composite services. Add one entry per composite service
    dockerized-microservice-swagger:
      path: /swagger/demo
      serviceId: dockerized-microservice
      stripPrefix: false

logging:
  level:
    com.netflix.discovery.DiscoveryClient: WARN
#    org.springframework.security: TRACE

management:
  security:
    enabled: false
  health:
      rabbit:
        enabled: false

spring:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.session.SessionAutoConfiguration
      - org.springframework.cloud.security.oauth2.proxy.OAuth2ProxyAutoConfiguration

##############################################################################
# Custom Profiles
#
# Activate with the command line argument --spring.profiles.active=profile,names
##############################################################################

---
# Redis is available

spring:
  profiles: cloud
